#!/usr/bin/env node

// Test YAML roundtrip through character-form.html without browser interaction
// Usage: ./test-roundtrip input.yaml [-o output.yaml]

const puppeteer = require('puppeteer');
const http = require('http');
const fs = require('fs');
const path = require('path');
const { setTimeout } = require('timers/promises');

// Parse command line arguments
function parseArgs() {
    const args = process.argv.slice(2);
    if (args.length === 0) {
        process.stderr.write('Usage: test-roundtrip input.yaml [-o output.yaml]\n');
        process.exit(1);
    }

    const inputFile = args[0];
    let outputFile = null;

    for (let i = 1; i < args.length; i++) {
        if (args[i] === '-o' && i + 1 < args.length) {
            outputFile = args[i + 1];
            i++;
        }
    }

    if (!fs.existsSync(inputFile)) {
        process.stderr.write(`Error: Input file "${inputFile}" not found\n`);
        process.exit(1);
    }

    return { inputFile, outputFile };
}

// Start HTTP server serving the docs directory
function startServer(port = 0) {
    return new Promise((resolve, reject) => {
        const docsDir = path.join(__dirname, 'docs');

        const server = http.createServer((req, res) => {
            // Simple static file server
            let filePath = path.join(docsDir, req.url === '/' ? 'index.html' : req.url);

            fs.readFile(filePath, (err, data) => {
                if (err) {
                    res.writeHead(404);
                    res.end('Not found');
                    return;
                }

                // Set content type based on extension
                const ext = path.extname(filePath);
                const contentTypes = {
                    '.html': 'text/html',
                    '.css': 'text/css',
                    '.js': 'application/javascript',
                    '.yaml': 'text/yaml',
                    '.yml': 'text/yaml'
                };

                res.writeHead(200, { 'Content-Type': contentTypes[ext] || 'text/plain' });
                res.end(data);
            });
        });

        server.listen(port, () => {
            const actualPort = server.address().port;
            resolve({ server, port: actualPort });
        });

        server.on('error', reject);
    });
}

async function main() {
    const { inputFile, outputFile } = parseArgs();

    // Read input YAML
    const inputYaml = fs.readFileSync(inputFile, 'utf8');

    // Start web server
    let serverInfo;
    try {
        serverInfo = await startServer();
        // process.stderr.write(`Server started on port ${serverInfo.port}\n`);
    } catch (err) {
        process.stderr.write(`Failed to start server: ${err.message}\n`);
        process.exit(1);
    }

    const { server, port } = serverInfo;
    let browser;
    let exitCode = 0;

    try {
        // Launch headless browser
        browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        const page = await browser.newPage();

        // Navigate to character form (docs/index.html via server)
        const url = `http://localhost:${port}/index.html`;
        await page.goto(url, { waitUntil: 'networkidle0' });

        // Create a temporary file for the upload
        const tempFile = path.join('/tmp', `test-${Date.now()}.yaml`);
        fs.writeFileSync(tempFile, inputYaml);

        // Wait for file input to be available and upload YAML file
        await page.waitForSelector('#yaml-file', { timeout: 5000 });
        const fileInput = await page.$('#yaml-file');
        if (!fileInput) {
            throw new Error('File input element not found');
        }
        await fileInput.uploadFile(tempFile);

        // Wait for file to be processed
        await setTimeout(500);

        // Directly call createYAMLContent() in the browser context to get the YAML
        const downloadedYaml = await page.evaluate(() => {
            return createYAMLContent();
        });

        // Clean up temp file
        fs.unlinkSync(tempFile);

        if (downloadedYaml) {
            if (outputFile) {
                fs.writeFileSync(outputFile, downloadedYaml);
                // process.stderr.write(`Output written to ${outputFile}\n`);
            } else {
                process.stdout.write(downloadedYaml);
            }
        } else {
            process.stderr.write('Error: Failed to capture downloaded YAML\n');
            exitCode = 1;
        }

    } catch (err) {
        process.stderr.write(`Error: ${err.message}\n`);
        if (err.stack) {
            process.stderr.write(`${err.stack}\n`);
        }
        exitCode = 1;
    } finally {
        // Clean up
        if (browser) {
            await browser.close();
        }
        server.close();
        process.exit(exitCode);
    }
}

main();
