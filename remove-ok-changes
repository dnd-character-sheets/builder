#!/usr/bin/env lua5.1

------------------ classic print functions ---------------------
local stringf = string.format
local function printf(...) return io.stdout:write(stringf(...)) end
local function eprintf(...) return io.stderr:write(stringf(...)) end
local function fprintf(fd, ...) return fd:write(stringf(...)) end
local function dief(...) eprintf(...); os.exit(1) end
local function errorf(...) return error(stringf(...)) end
local function runf(...) return os.execute(stringf(...)) end
----------------------------------------------------------------

local pats = {
  'Insert %d+ at LEVEL',
  'Insert "%a+" at CLASS',
  'Insert "silverpine" at LAYOUT',
  'Insert "3col" at LAYOUT',
  'Insert "[%a%s]+" at SPECIALTY',
  'Insert "" at [%u%s]+',
  'Insert { } at %u+',
  'At .*, replace { proficiencies_skip: true } with ""',
  'At [%u%s]+, replace { } with ""',
  [[Insert "\\%a+" at [%u%s]+ FONT]],
  'Remove entry at .*PROFICIENCIES%.%d+%.proficiencies_skip',
  'At [%u%s]*PROFICIENCIES%.%d+[%.%d]*, replace "" with { }',
}

local bools = { 'COLOR', 'STONES', 'PREGENERATED' }

do
  for _, key in ipairs(bools) do
    for bool in ('true false'):gmatch '%S+' do
      table.insert(pats, stringf('Insert %s at %s', bool, key))
    end
  end

  for i, pat in ipairs(pats) do
    pats[i] = stringf('^%s$', pat)
  end
end

local function ok_change(line)
  for _, pat in ipairs(pats) do
    if line:find(pat) then
      return true
    end
  end
  local num, string = line:match '^At .*, replace (%S+) with "(%S+)"$'
  if num and num == string then
    return true
  end
end

local rc = 0

require 'catpattern'.run (arg,
  function(fd)
    for line in fd:lines() do
      if not ok_change(line) then
        io.stdout:write(line, '\n')
        rc = 1
      end
    end
  end)

os.exit(rc)
